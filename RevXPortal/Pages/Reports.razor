@page "/reports"
@inject IReportEndpoint _reportEndpoint
@inject IInvoiceEndpoint _invoiceEndpoint
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

<style>
	.page-container {
		padding: 1rem 0;
	}

	.report-generator {
		width: 95%;
		border: solid 1px #c5c5c5;
		border-radius: 3px;
		min-height: 2rem;
		margin: 0 auto;
	}
</style>

@*<StackedBarChart RowCount="6" Data="MonthlyIncome" />*@
@*<DoubleStackedBarChart>
	<Header>
	<DoubleStackedBarHeader BarOneTitle="School Hours" BarTwoTitle="After School Hours" StackOneTitle="Encore" StackTwoTitle="Legadel" BarOneTotals="12000" BarTwoTotals="6000"></DoubleStackedBarHeader>
	</Header>
	<Content>
	<DoubleStackedBarContent RowCount="6" Data="MonthlyIncome"></DoubleStackedBarContent>
	</Content>
	</DoubleStackedBarChart>*@

<div class="page-container">
	<div class="report-generator">
	</div>
</div>


@code {

	public List<IncomeReportModel> MonthlyIncome { get; set; }

	public List<double> MonthlyNumbers { get; set; } = new();

	public List<int> Values { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		MonthlyIncome = await _reportEndpoint.GetMonthlyIncome(DateTime.Parse("2020-09-01"), DateTime.Now, "Month");
		foreach (var item in MonthlyIncome)
		{
			item.Date = DateTime.Parse(item.Title).ToString("MMMM");
			var t = ( item.SchoolPrimary + item.AfterSchoolPrimary + item.SchoolSecondary + item.AfterSchoolSecondary );
			MonthlyNumbers.Add(t);
		}
	}
}