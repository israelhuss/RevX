@page "/reports"
@inject IReportEndpoint _reportEndpoint

<div class="mt-5"></div>
<div class="mt-5"></div>
<StackedBarChart RowCount="6" Data="MonthlyIncome" />
<div>
    <div class="mt-3" style=" display: flex; width: max-content; margin-left: auto; margin-right: auto;">
        <p style="font-weight: bold; line-height: 1.1;">This report was generated by:</p>
        <img src="https://timcohussstorage.blob.core.windows.net/revxlogo/Logo-text.jpg" alt="RevX" style="height: 1.1rem; margin-left: .5rem;" />
    </div>
</div>


<div class="m-5"></div>
<div class="m-5"></div>
<div class="m-5"></div>

<PieChart Size="500" Data="MonthlyNumbers" TootlipData="PieTooltipInfo"></PieChart>



<div class="m-5"></div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string userId { get; set; }

    public List<IncomeReportModel> MonthlyIncome { get; set; }

    public List<double> MonthlyNumbers { get; set; } = new();
    public List<string> PieTooltipInfo { get; set; } = new();

    public List<int> Values { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        userId = ( await authenticationStateTask ).User.FindFirst(ClaimTypes.NameIdentifier).Value;
        MonthlyIncome = await _reportEndpoint.GetMonthlyIncome(DateTime.Parse("2020-09-01"), DateTime.Parse("2021-11-30"), userId, "month");
        MonthlyNumbers = new();
        foreach (var item in MonthlyIncome)
        {
            item.Title = DateTime.Parse(item.Date).ToString("MMMM");
            var n = ( item.SchoolPrimary + item.AfterSchoolPrimary + item.SchoolSecondary + item.AfterSchoolSecondary );
            var t = $"{DateTime.Parse(item.Date).ToString("Y")}\n{n} Hours.";
            PieTooltipInfo.Add(t);
            MonthlyNumbers.Add(n);
        }
    }
}