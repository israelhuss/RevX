@page "/reports"
@inject IReportEndpoint _reportEndpoint
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

<div class="mt-5"></div>
<div class="mt-5"></div>
<SchoolAfterSchoolReport  />
<div>
    <div class="mt-3" style=" display: flex; width: max-content; margin-left: auto; margin-right: auto;">
        <p style="font-weight: bold; line-height: 1.1;">This report was generated by:</p>
        <img src="https://timcohussstorage.blob.core.windows.net/revxlogo/Logo-text.jpg" alt="RevX" style="height: 1.1rem; margin-left: .5rem;" />
    </div>
</div>


<div class="m-5"></div>
<div class="m-5"></div>
<div class="m-5"></div>

<PieChart Size="500" Data="MonthlyNumbers" TootlipData="PieTooltipInfo"></PieChart>



<div class="m-5"></div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string userId { get; set; }


    public List<string> PieTooltipInfo { get; set; } = new();
    public List<double> MonthlyNumbers { get; set; } = new();
    protected override async Task OnParametersSetAsync()
    {
        if (!( await authenticationStateTask ).User.Identity.IsAuthenticated)
        {
            await jsRuntime.InvokeVoidAsync("log", "User id was null redirecting to login");
            NavManager.NavigateTo($"/login?url={NavManager.Uri.Replace(NavManager.BaseUri, "")}");
        }
        else
        {
            userId = ( await authenticationStateTask ).User.FindFirst(ClaimTypes.NameIdentifier).Value;
            await jsRuntime.InvokeVoidAsync("log", $"User id was: {userId}");
        }
    }
}