@page "/sessions"
@using RevXPortal.Models
@inject ISessionEndpoint _sessionEndpoint

@*@attribute [Authorize]*@

<style>
    .grid {
        border: solid 1px #626263;
        border-radius: 4.5px;
        text-align: center;
        margin: 1rem;
        height: 75vh;
        overflow: hidden;
    }

    th {
        font-size: 1.3rem;
    }

    .d-flex {
        align-items: baseline;
    }

    .icon {
        font-size: 1rem;
    }

    .custom-select:focus {
        box-shadow: none;
    }

    .valid.modified:not([type=checkbox]) {
        outline: none;
        border: solid 1px #26b050;
    }

    .modal {
        background-color: rgb(0 0 0 / 0.70)
    }

    .fade-in {
        animation: fade-in;
        animation-duration: .6s;
    }

    .form-group > label {
        margin-bottom: 0;
    }

    td > .btn {
        padding: 0;
    }
</style>

<div class="d-flex justify-content-between">
    <h3>Sessions</h3>

    <button class="btn btn-primary" @onclick="ShowDialog">Add Session</button>
</div>

<div class="grid">
    <table class="table table-bordered table-striped" style="margin-top: -1px">
        <thead>
            <tr>
                @if (sessions is not null && sessions.Count > 0)
                {
                    <th></th>
                }
                <th>Student</th>
                <th>Date</th>
                <th>Start Time</th>
                <th>End Time</th>
                <th>Provider</th>
                <th>Billing Status</th>
                <th>Notes</th>
            </tr>
        </thead>

        @if (sessions is not null && sessions.Count > 0)
        {
            <tbody>
                @foreach (var session in sessions)
                {
                    <tr>
                        <td class=""><button type="button" class="btn btn-outline" @onclick="(() => Edit(session))"><i class="oi oi-trash icon"></i></button></td>
                        <td>@session.Student.FullName</td>
                        <td>@session.Date.ToShortDateString()</td>
                        <td>@session.StartTime</td>
                        <td>@session.EndTime</td>
                        <td>@session.Provider.Name</td>
                        <td>@session.BillingStatus.BillingStatus</td>
                        <td>@session.Notes</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>Hi</tr>
            </tfoot>
        }
    </table>

    @* Main Row while loading the sessions *@
    @if (sessions is null)
    {
        <div class="empty-table-cell grid-cell">
            <h4>Please wait... <br> Loading sessions!!!</h4>
        </div>
    }

    @* Main Row if sessions is empty *@
    @if (sessions is not null && sessions.Count == 0)
    {
        <div class="empty-table-cell grid-cell">
            <h4>Please <a href="#">click here</a> to enter a session</h4>
        </div>
    }
</div>

<FormModal @ref="FormModalRef" FormSession="ManageSession" SaveForm="SaveForm"></FormModal>




@code {
    private FormModal FormModalRef { get; set; }
    public ManageSessionModel ManageSession { get; set; } = new();



    private List<DisplaySessionModel> sessions { get; set; }

    protected async override Task OnInitializedAsync()
    {
        sessions = await _sessionEndpoint.GetAll();
    }


    private async void SaveForm()
    {

        FormModalRef.Hide();
        await _sessionEndpoint.SaveSession(ManageSession);
        sessions = await _sessionEndpoint.GetAll();

        StateHasChanged();

        ManageSession = new();

    }

    private void ShowDialog()
    {
        FormModalRef.Show();
    }

    private void Edit(DisplaySessionModel session) => EditSession(session);

    private void EditSession(DisplaySessionModel session)
    {
        ManageSession = new()
        {
            Student = session.Student,
            Date = session.Date,
            StartTime = session.StartTime.ToString(),
            EndTime = session.EndTime.ToString(),
            Provider = session.Provider,
            BillingStatus = session.BillingStatus,
            Notes = session.Notes
        };

        FormModalRef.Show();
    }


}
