@inject IJSRuntime jsRuntime
<style>
    .date-input {
        user-select: none;
        cursor: default !important;
        outline: none;
        border: none;
        box-shadow: none;
        padding: 0;
        margin: 0;
        border-radius: 0px;
    }

        .date-input:active,
        .date-input:focus {
            outline: none;
            border: none;
            box-shadow: none;
            padding: 0;
            margin: 0;
            border-radius: 0px;
        }

        .date-input:focus {
            background-color: rgb(26, 115, 232);
            color: white;
            border-radius: 0px;
        }

    .form-control:focus-within {
        color: #495057;
        background-color: #fff;
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgb(0 123 255 / 25%);
    }

    .form-control > label {
        margin-bottom: 0;
    }
</style>



<div class="d-flex align-items-center form-control" tabindex="-1" @ref="containerElement" @onkeyup="@OnDivPress">
    <input type="button" class="date-input btn" @onkeydown="@MonthInput" tabindex="0" @ref="monthElement" @onclick="(() => MoveFocus(monthElement))" value="@Month" />
    <label style="padding-right: 1px; padding-left: 1px;">/</label>
    <input type="button" class="date-input btn" @onkeydown="@DayInput" tabindex="0" @ref="dayElement" @onclick="(() => MoveFocus(dayElement))" value="@Day" />
    <label>/</label>
    <input type="button" class="date-input btn" @onkeydown="@YearInput" tabindex="0" @ref="yearElement" @onclick="(() => MoveFocus(yearElement))" value="@Year" />
</div>



@code {
    [Parameter]
    public DateTime? Date { get; set; }
    [Parameter]
    public EventCallback<DateTime?> DateChanged { get; set; }

    private string editing = string.Empty;

    protected override void OnParametersSet()
    {
        jsRuntime.InvokeVoidAsync("log", NumberInputHelper.Validate(2021, "02--", "3"));
        jsRuntime.InvokeVoidAsync("log", Date);
        if (Date.HasValue)
        {
            Month = Date.Value.Month.ToString("D2");
            Day = Date.Value.Day.ToString("D2");
            Year = Date.Value.Year.ToString();
        }
        else
        {
            Date = null;
        }
    }

    protected ElementReference containerElement;
    protected ElementReference monthElement;
    protected ElementReference dayElement;
    protected ElementReference yearElement;

    private string _month = "--";
    private string _day = "--";
    private string _year = "----";

    public string Month
    {
        get { return _month; }
        set { _month = value; }
    }

    public string Day
    {
        get { return _day; }
        set { _day = value; }
    }

    public string Year
    {
        get { return _year; }
        set { _year = value; }
    }

    private void OnDivPress(KeyboardEventArgs e)
    {
        if (e.Key == "Delete")
        {
            Day = "--";
            Month = "--";
            Year = "----";
            OnDateChanged();
        }
    }

    private void MonthInput(KeyboardEventArgs e)
    {
        if (e.Key == "Backspace")
        {
            Month = "--";
            OnDateChanged();
        }
        else if (e.Key == "Delete")
        {
            Day = "--";
            Month = "--";
            Year = "----";
            OnDateChanged();
        }
        if (char.IsNumber(e.Key, 0))
        {
            int.TryParse(e.Key, out int n);

            if (editing == "month")
            {
                if (n >= 2 && Month[ 1 ] != '0' && Month[ 1 ] != '1')
                {
                    Month = "0" + e.Key;
                    MoveFocus(dayElement);
                    editing = "";
                }
                else
                {
                    Month = Month[ 1 ] + e.Key;
                    MoveFocus(dayElement);
                    editing = "";
                }
            }
            else
            {
                Month = "0" + e.Key;
                if (n >= 2)
                {
                    MoveFocus(dayElement);
                    editing = "";
                }
                else
                {
                    editing = "month";
                }
            }
        }

    }

    private void DayInput(KeyboardEventArgs e)
    {
        if (e.Key == "Backspace")
        {
            Day = "--";
            OnDateChanged();
        }
        else if (e.Key == "Delete")
        {
            Day = "--";
            Month = "--";
            Year = "----";
            OnDateChanged();
        }
        if (char.IsNumber(e.Key, 0))
        {
            int.TryParse(e.Key, out int n);

            if (editing == "day")
            {
                if (n >= 4 && Day[ 1 ] != '0' && Day[ 1 ] != '1' && Day[ 1 ] != '2')
                {
                    Day = "0" + e.Key;
                    MoveFocus(yearElement);
                    editing = "";
                }
                else if (Day[ 1 ] == '3')
                {
                    if (n > 1)
                    {
                        Day = "0" + e.Key;
                        MoveFocus(yearElement);
                        editing = "";
                    }
                    else
                    {
                        Day = Day[ 1 ] + e.Key;
                        MoveFocus(yearElement);
                        editing = "";
                    }
                }
                else
                {
                    Day = Day[ 1 ] + e.Key;
                    MoveFocus(yearElement);
                    editing = "";
                }
            }
            else
            {
                Day = "0" + e.Key;
                if (n >= 4)
                {
                    MoveFocus(yearElement);
                    editing = "";
                }
                else
                {
                    editing = "day";
                }
            }
        }
    }

    private void YearInput(KeyboardEventArgs e)
    {
        int max = DateTime.Now.Year;
        int min = 1950;
        if (e.Key == "Backspace")
        {
            Year = "----";
            OnDateChanged();
        }
        else if (e.Key == "Delete")
        {
            Day = "--";
            Month = "--";
            Year = "----";
            OnDateChanged();
        }
        if (char.IsNumber(e.Key, 0))
        {
            int.TryParse(e.Key, out int n);

            if (editing == "year")
            {
                if (int.TryParse(Year, out int y) && int.Parse(y.ToString() + n.ToString()) <= max)
                {
                    Year = int.Parse(y.ToString() + n.ToString()).ToString("D4");
                    if (int.Parse(Year) >= min)
                    {
                        editing = "";
                        OnDateChanged();
                    }
                }
                else
                {
                    Year = "000" + e.Key;
                }
            }
            else
            {
                Year = "000" + e.Key;
                editing = "year";
            }
        }
    }

    private void OnDateChanged()
    {
        if (Month != "--" && Day != "--" && Year != "----")
        {
            try
            {
                Date = DateTime.Parse($"{Month}/{Day}/{Year}");
                jsRuntime.InvokeVoidAsync("log", $"THe date i created for you: {Date}");
            }
            catch
            {
                jsRuntime.InvokeVoidAsync("log", $"Had some issues: {Date}");
            }
        }
        else
        {
            jsRuntime.InvokeVoidAsync("log", "Couldn't create a date yet.");
            Date = null;
        }
        DateChanged.InvokeAsync(Date);
    }

    private void MoveFocus(ElementReference element)
    {
        element.FocusAsync();
    }
}

