@inject IJSRuntime jsRuntime

<style>
	.calendar-container {
		display: grid;
		grid-template-columns: repeat(7, 1fr);
		/*border-left: solid 1px #a2a2a2;*/
		border: solid 1px #a2a2a2;
		border-radius: 5px;
		overflow: hidden !important;
	}

	.calendar-day {
		text-align: left;
		border-right: solid 1px #a2a2a2;
		border-top: solid 1px #a2a2a2;
		min-height: 4rem;
	}

		.calendar-day.top-row {
			border-top: none;
		}

		.calendar-day.right-col {
			border-right: none;
		}

		.calendar-day.bottom-row {
			margin-bottom: -1px;
		}

	.not-active {
		color: #cdcdcd;
	}

	.calendar-day-number {
		padding: 2px;
	}

	.not-active > .calendar-day-events {
		display: none;
	}
</style>


<div class="calendar-container">
	@{
		int i = 1;
	}
	@if (AllDates is not null)
	{
		foreach (var day in AllDates)
		{
			<CalendarDay DayInMonth="day" Events="@(Events.Where(e => e.Date == day.Value).ToList())" TopRow="i < 8" RightCol="i % 7 == 0" BottomRow="(AllDates.Count - i) < 7" EventType="EventType"></CalendarDay>
			i++;
		}
	}
</div>

@code {
	[Parameter]
	public DateOnly FirstDayOfMonth { get; set; }
	[Parameter]
	public List<ICalendarEvent> Events { get; set; }
	[Parameter]
	public Type EventType { get; set; } = typeof(SimpleEvent);

	public int LastDay { get; set; }
	List<KeyValuePair<bool, DateOnly>> AllDates { get; set; }


	protected override void OnInitialized()
	{
		LastDay = DateTime.DaysInMonth(FirstDayOfMonth.Year, FirstDayOfMonth.Month);
		AllDates = GetAllDatesForCalendar(LastDay);
		jsRuntime.InvokeVoidAsync("log", "AllDate Length: " + AllDates.Count);
		base.OnInitialized();
	}

	private List<KeyValuePair<bool, DateOnly>> GetAllDatesForCalendar(int lastDay)
	{
		List<KeyValuePair<bool, DateOnly>> output = new();
		try
		{
			DateOnly LastDate = new DateOnly(FirstDayOfMonth.Year, FirstDayOfMonth.Month, lastDay);

			int fromLastMonth = (int)FirstDayOfMonth.DayOfWeek;
			int fromNextMonth = 6 - (int)LastDate.DayOfWeek;
			jsRuntime.InvokeVoidAsync("log", "Next month needs: " + fromNextMonth);
			if (fromLastMonth > 0)
			{
				int lastMonth = FirstDayOfMonth.Month == 1 ? 12 : FirstDayOfMonth.Month - 1;
				int lastMonthYear = FirstDayOfMonth.Month == 1 ? FirstDayOfMonth.Year - 1 : FirstDayOfMonth.Year;
				int lastMonthDays = DateTime.DaysInMonth(lastMonthYear, lastMonth) - ( fromLastMonth - 1 );
				for (var i = 0; i < fromLastMonth; i++)
				{
					output.Add(new KeyValuePair<bool, DateOnly>(false, new DateOnly(lastMonthYear, lastMonth, lastMonthDays)));
					lastMonthDays++;
				}
			}

			for (var i = 0; i < LastDay; i++)
			{
				output.Add(new KeyValuePair<bool, DateOnly>(true, new DateOnly(FirstDayOfMonth.Year, FirstDayOfMonth.Month, i + 1)));
			}

			if (fromNextMonth > 0)
			{
				int nextMonth = FirstDayOfMonth.Month == 12 ? 1 : FirstDayOfMonth.Month + 1;
				int nextMonthYear = FirstDayOfMonth.Month == 12 ? FirstDayOfMonth.Year + 1 : FirstDayOfMonth.Year;
				for (var i = 0; i < fromNextMonth; i++)
				{
					output.Add(new KeyValuePair<bool, DateOnly>(false, new DateOnly(nextMonthYear, nextMonth, i + 1)));
				}
			}
			return output;
		}
		catch (Exception ex)
		{
			jsRuntime.InvokeVoidAsync("log", ex.Message);
			return output;
		}
	}

	private List<ICalendarEvent> GetEventsForDay(DateOnly date)
	{
		try
		{
			if (Events is not null)
			{
				var output = Events.Where(e => e.Date == date).ToList();
				return output;
			}
			else
			{
				return new List<ICalendarEvent>();
			}
		}
		catch
		{
			return new List<ICalendarEvent>();
		}
	}

}
