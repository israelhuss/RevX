
<div class="calendar-day @(@DayInMonth.Key ? "active" : "not-active") @(TopRow ? "top-row": "") @(RightCol ? "right-col" : "") @(BottomRow ? "bottom-row" : "")">
	<div class="calendar-day-number">
		@DayInMonth.Value.Day
	</div>
	<div class="calendar-day-events">
		@foreach (var ev in Events)
		{
			<DynamicComponent Type="ev.ComponentType is not null ? ev.ComponentType : EventType" Parameters="@(GetParameters(ev))"></DynamicComponent>
		}
	</div>
</div>
@code {
	[Parameter]
	public KeyValuePair<bool, DateOnly> DayInMonth { get; set; }
	[Parameter]
	public List<ICalendarEvent> Events { get; set; }
	[Parameter]
	public bool TopRow { get; set; }
	[Parameter]
	public bool RightCol { get; set; }
	[Parameter]
	public bool BottomRow { get; set; }

	[Parameter]
	public Type EventType { get; set; } = typeof(SimpleEvent);

	private Dictionary<string, object> GetParameters(ICalendarEvent ev)
	{
		Dictionary<string, object> dictinaryFromModel = ev.Parameters is not null ? ev.Parameters : new();
		if (!dictinaryFromModel.ContainsKey("Tilte"))
		{
			dictinaryFromModel[ "Title" ] = ev.Title;
		}
		if (!dictinaryFromModel.ContainsKey("Time"))
		{
			dictinaryFromModel[ "Time" ] = ev.AllDay ? "" : GetShortHourString(ev.StartTime.Value);
		}
		if (!dictinaryFromModel.ContainsKey("Language"))
		{
			dictinaryFromModel[ "Language" ] = ev.Language;
		}
		return dictinaryFromModel;
	}

	private string GetShortHourString(TimeOnly time)
	{
		var hours = time.Hour;
		var t = hours >= 12 ? "p" : "a";
		if (hours > 12)
		{
			hours = hours - 12;
		}
		return $"{hours}{t}";
	}
}
