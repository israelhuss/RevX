@inject IJSRuntime jsRuntime;

@if (ShowTooltip)
{
    if (Text is not null)
    {
        <div id="@guid.ToString()" class="m-tooltip-wrapper">
            @Text
        </div>
    }
    else if (TooltipContent is not null)
    {
        <div id="@guid.ToString()" style="display: @(ShowTooltip ? "block" : "none");" class="floater-container">
            <div class="dotted-line"></div>
            <div class="floater">
                <div>
                    @if (TooltipContent.Contains("Title"))
                    {
                        <div class="floater-title">@TooltipContent["Title"]</div>
                    }
                    @if (TooltipContent.Contains("Title"))
                    {
                        <div class="floater-subtitle">@TooltipContent["SubTitle"]</div>
                    }
                    @foreach (var i in TooltipContent)
                    {
                        DictionaryEntry t = (DictionaryEntry)i;
                        if (t.Key.ToString() != "Title" && t.Key.ToString() != "SubTitle")
                        {
                            <div class="floater-pair">
                                <div style="margin-right: 3px;">@t.Key:</div>
                                <div>@t.Value</div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter] public string Text { get; set; }
    [Parameter] public ListDictionary TooltipContent { get; set; }

    [Parameter] public bool ShowTooltip { get; set; } = false;

    [Parameter] public string X { get; set; } = "0px";
    [Parameter] public string Y { get; set; } = "0px";
    private Guid guid { get; set; }
    protected override void OnInitialized()
    {
        guid = Guid.NewGuid();
        jsRuntime.InvokeVoidAsync("log", $"Moving Tooltip: Text is {Text}, Content is {JsonSerializer.Serialize(TooltipContent)}");
        base.OnInitialized();
    }

    public void Show()
    {
        jsRuntime.InvokeVoidAsync("setUpMovingTooltip", guid);
        ShowTooltip = true;
        StateHasChanged();
    }

    public void Hide()
    {
        jsRuntime.InvokeVoidAsync("removeMovingTooltip", guid);
        ShowTooltip = false;
        StateHasChanged();
    }

    public void SetText(string text)
    {
        Text = text;
    }
}