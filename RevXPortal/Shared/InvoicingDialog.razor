@inject IInvoiceEndpoint _invoiceEndpoint
@inject ToastService toastService
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime


<style>
    .invoice-table-container {
        border: solid 1px #626263;
        border-radius: 4.5px;
        text-align: center;
        margin: 1rem;
        overflow: hidden;
    }
</style>
@if (ShowDialog)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered fade-in-and-grow" role="document" style="max-width: max-content;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Invoicing</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Hide">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="modal-body">
                    <div class="invoice-table-container" style="position:relative">
                        @if (SavingInProgress)
                        {
                            <div style="height: 100%; width: 100%; position: absolute; top: 0; left: 0; z-index: 10000; background-color: rgb(16 16 16 / 0.75)">
                                <div class="spinner-parent">
                                    <div class="spinner spinner-border" style="border: .15em solid #ffffff; border-right-color: transparent"></div>
                                    <div class="loading-text" style="color: #fff;">Saving Invoice</div>
                                </div>
                            </div>
                        }
                        <table class="table table-bordered table-striped" style="margin-top: -1px" @ref="TableRef">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Student</th>
                                    <th>Date</th>
                                    <th>Start Time</th>
                                    <th>End Time</th>
                                    <th>Notes</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in InvoicingItems.OrderBy(s => s.Date).ThenBy(s => s.StartTime))
                                {
                                    <tr>
                                        <td>
                                            <input class="checkbox" type="checkbox" value="" checked @onchange="( (e) => CheckBoxClicked(e, item))">
                                        </td>
                                        <td>@item.Student.DisplayName</td>
                                        <td>@item.Date.ToShortDateString()</td>
                                        <td>@TimeConverters.ConvertTimeSpanTo12HourString(item.StartTime)</td>
                                        <td>@TimeConverters.ConvertTimeSpanTo12HourString(item.EndTime)</td>
                                        <td>@item.Notes</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="6">
                                        <h3 style="margin-bottom: 0;">Total Hours: @TotalHours</h3>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                    <SignaturePad SignatureChanged="(data) => Signature = data"/>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Hide">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="InvoiceClicked">
                        Invoice
                    </button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    protected bool ShowDialog { get; set; }
    protected bool SavingInProgress { get; set; } = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string userId { get; set; }

    [Parameter]
    public List<ManageSessionModel> InvoicingItems { get; set; }

    [Parameter]
    public EventCallback<List<ManageSessionModel>> InvoicingItemsChanged { get; set; }

    public string Signature { get; set; }

    public double TotalHours { get; set; } = 0;

    private List<ManageSessionModel> finalList { get; set; }

    private ElementReference TableRef { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (InvoicingItems is not null)
        {
            finalList = new(InvoicingItems);
            TotalHours = CalculateTotalHours(finalList);
        }
        return Task.CompletedTask;
    }

    protected async override Task OnInitializedAsync()
    {
        if (!( await authenticationStateTask ).User.Identity.IsAuthenticated)
        {
            await jsRuntime.InvokeVoidAsync("log", "User id was null redirecting to login");
            NavManager.NavigateTo($"/login?url={NavManager.Uri.Replace(NavManager.BaseUri, "")}");
        }
        else
        {
            userId = ( await authenticationStateTask ).User.FindFirst(ClaimTypes.NameIdentifier).Value;
            await jsRuntime.InvokeVoidAsync("log", $"User id is: {userId}");
        }
    }

    public void Show()
    {
        ShowDialog = true;
        StateHasChanged();
    }

    public void Hide()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    private void CheckBoxClicked(ChangeEventArgs e, ManageSessionModel model)
    {
        if ((bool)e.Value)
        {
            finalList.Add(model);
            TotalHours = CalculateTotalHours(finalList);
        }
        else if (!(bool)e.Value)
        {
            finalList.Remove(model);
            TotalHours = CalculateTotalHours(finalList);
        }
    }

    private async void InvoiceClicked()
    {
        try
        {
            InvoiceModel invoiceModel = new() { SessionIds = new List<int>(), TotalHours = TotalHours, UserId = userId, Signature = Signature };
            foreach (var item in finalList)
            {
                invoiceModel.SessionIds.Add(item.Id);
            }
            SavingInProgress = true;
            await Task.Delay(3000);
            await _invoiceEndpoint.SaveInvoice(invoiceModel);

            ShowDialog = false;
            SavingInProgress = false;
            await InvoicingItemsChanged.InvokeAsync();
            StateHasChanged();

            toastService.ShowToast("The invoice was successfully submitted.", ToastLevel.Success);
        }
        catch (Exception)
        {
            toastService.ShowToast("There was a error proccessing your invoice.", ToastLevel.Error);
        }


    }

    private void ConsoleWriter(List<ManageSessionModel> models)
    {
        foreach (var model in models)
        {
            Console.WriteLine($"{model.Student.DisplayName} | {model.Date} | {model.StartTime} | {model.EndTime}");
        }
    }

    private double CalculateTotalHours(List<ManageSessionModel> sessions)
    {
        double output = 0;
        output = sessions.Sum(s => (s.EndTime - s.StartTime).TotalHours);
        return Math.Round(output, 2);
    }

}
