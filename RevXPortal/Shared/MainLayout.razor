@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject IClientEndpoint _clientEndnoint
@inject IJSRuntime jsRuntime
@inject IAuthenticationService AuthService


<style>
	.revx-sidebar {
		background-image: linear-gradient(to bottom right, #334c66, #3e6581) !important;
		width: 19.20rem;
		height: calc(100vh - 5.60rem);
		position: sticky;
		top: 0;
		margin-top: 5.60rem;
	}

		.revx-sidebar.force {
			position: absolute;
			display: block;
			z-index: 100000;
		}

	.nav-bar {
		display: flex;
		justify-content: space-between;
		background-image: linear-gradient(to bottom right, #213850, #3e6581) !important;
		position: fixed;
		width: 100%;
		z-index: 1000;
		height: 5.60rem;
		align-items: center;
	}

	.nav-bar-item {
		height: 5.60rem;
		width: calc(100vw / 2);
	}

	.login-container:focus-visible {
		border: none;
		outline: none;
	}

	.logo {
		text-align: left;
	}

	.account {
		text-align: right;
		display: flex;
		align-items: center;
		justify-content: flex-end;
	}

	.main-page {
		display: flex;
		overflow: hidden;
		height: 100vh;
	}

	.content {
		flex: 1;
		max-height: calc(100vh - 5.60rem);
		overflow: auto !important;
		margin-top: 5.60rem;
	}

	.navbar-toggler {
		display: none;
	}

	.navbar-brand {
		margin-left: 2.40rem;
		padding-top: 0.80rem;
		padding-bottom: 0.80rem;
	}

	.login-logo {
		padding: 4.80rem 0 1.60rem;
	}

	.revx-card {
		background: #fff;
		box-shadow: 0 1px 1px 0 rgb(58 60 77 / 10%), 0 2px 8px 0 rgb(58 60 77 / 8%);
		border-radius: 0 0 1px 1px;
		border: none;
		margin: 8.00rem auto;
		max-width: 65.60rem;
		min-width: 65.60rem;
		position: relative;
		padding: 40px 80px;
	}

	.revx-input1 {
		width: 100%;
		border: 1px solid #d1d7de;
		height: 5.28rem;
		line-height: 5.28rem;
		border-radius: 3px;
		padding-left: 15px;
		-webkit-appearance: none;
		font-size: 1.92rem;
	}

		.revx-input1.error {
			border: 2px solid red;
		}

		.revx-input1.valid {
			border: 2px solid #00dd00;
		}

		.revx-input1:focus {
			border: 1px solid #000;
		}

	.login-btn {
		width: 70%;
		margin: calc(3.20rem + 0.80rem) auto;
		display: block;
		height: 5.28rem;
		border-radius: 3px;
		border: none;
		background-color: #00ae0d;
		color: #f2f2f5;
	}

		.login-btn:focus {
			border: none;
			outline: none;
		}

		.login-btn:hover {
			background-color: #008f0b;
		}

		.login-btn.working {
			background-color: #6bca73;
		}

		.login-btn.disabled {
			background-color: rgb(239, 239, 239);
			color: #000;
		}
</style>
<AuthorizeView Context="context">
	<Authorized>
		<div class="master">
			<div class="nav-bar">
				<div class="navbar-toggler nav-bar-item">
					<button class="navbar-toggler-btn" @onclick="ToggleSidebar">
						<i class="fas fa-bars" style="font-size: 2.24rem; color: #d7d7d7;"></i>
					</button>
				</div>
				<div class="logo nav-bar-item">
					<a class="navbar-brand" href=""><img src="https://timcohussstorage.blob.core.windows.net/revxlogo/Logo-text-transparent.png" style="height: 4.00rem;" /></a>
				</div>
				<div class="account nav-bar-item">
					<AccountInfo Name="@($"{context.User.FindFirst(ClaimTypes.GivenName).Value} {context.User.FindFirst(ClaimTypes.Surname).Value}")">
						<AccountInfoDropItem OnClick="OnLogout">Log Out</AccountInfoDropItem>
						<AccountInfoDropItem>Help Center</AccountInfoDropItem>
					</AccountInfo>
				</div>
			</div>
			<div class="main-page">
				<BlazoredToasts ShowProgressBar="true" Timeout="10"
								IconType="IconType.FontAwesome"
								SuccessClass="success-toast-override"
								SuccessIcon="fa fa-thumbs-up"
								ErrorIcon="fa fa-bug"
								RemoveToastsOnNavigation="true" />
				<div class="revx-sidebar @(showSidebar ? "force" : "")">
					<NavMenu />
				</div>

				<div class="content px-4">
					<CascadingAuthenticationState>
						@*<CustomErrorBoundary >
							<ChildContent>*@
								@Body
							@*</ChildContent>
							<ErrorContent Context="errorContext">
								<p class="errorUI">Nothing to see here right now. Sorry!</p>
								@errorContext.Message
							</ErrorContent>
						</CustomErrorBoundary>*@
					</CascadingAuthenticationState>
				</div>
			</div>
		</div>
	</Authorized>
	<NotAuthorized>
		<div class="login-container" tabindex="0" @onkeyup="@(async (e) => { if (e.Key == "Enter") { await ExecuteLogin(); }; })">
			<div class="login-logo">
				<img src="https://timcohussstorage.blob.core.windows.net/revxlogo/Logo-text-transparent.png" style="width: 24.00rem; display: block; margin: 0 auto;" />
			</div>
			<div class="revx-card">
				<h1 style="font-weight: 100; text-align: center; padding: 3.20rem 0;">Welcome to the RevX Portal</h1>
				<div style="margin-bottom: 1.60rem">
					<input class="revx-input1 @(model.Email == string.Empty ? "error" : model.Email is null ? "" : "valid")" type="email" placeholder="Email" @onkeyup="@(async (e) => { if (e.Key == "Enter") { await ExecuteLogin(); }; })" @oninput="@((e) => InputChanged(e, "email"))" />
					@if (model.Email == string.Empty || ( model.Email is not null && !emailRegex.IsMatch(model.Email) ))
					{
						<small style="color: red;">@emailErrorText</small>
					}
				</div>
				<div style="margin-bottom: 1.60rem">
					<input class="revx-input1 @(model.Password == string.Empty ? "error" : model.Password is null ? "" : "valid")" type="password" placeholder="Password" @onkeyup="@(async (e) => { if (e.Key == "Enter") { await ExecuteLogin(); }; })" @oninput="@((e) => InputChanged(e, "password"))" />
					@if (model.Password == string.Empty)
					{
						<small style="color: red;">@passwordErrorText</small>
					}
				</div>
				<div style="margin-bottom: 0.80rem">
					<button type="submit" class="login-btn @(canLogIn ? "" : "disabled") @(btnText == "Signing In..." ? "working" : "")" @onclick="ExecuteLogin">@btnText</button>
					@if (showAuthenticationError)
					{
						<small style="color: red; text-align: center; margin-top: -3.20rem; display: block;">@authenticationErrorText</small>
					}
				</div>
			</div>
		</div>
	</NotAuthorized>
</AuthorizeView>


@code {
	public string UserName { get; set; } = "";
	private AuthenticationUserModel model = new();
	private bool showAuthenticationError = false;
	private string authenticationErrorText { get; set; }
	private string emailErrorText { get; set; }
	private string passwordErrorText { get; set; }
	private bool canLogIn { get; set; } = false;
	private string btnText { get; set; } = "Sign In";
	private bool showSidebar { get; set; } = false;
	private Regex emailRegex { get; set; } = new Regex(@"^[a-zA-Z0-9.!#$%&'*+=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$");
	//ErrorBoundary errorBoundary { get; set; }

 //   protected override void OnParametersSet()
 //   {
 //       errorBoundary?.Recover();
 //   }

	//private void OnLogin()
	//{
	//    NavManager.NavigateTo($"/login?url={NavManager.Uri.Replace(NavManager.BaseUri, "")}");
	//}

	private void CanLogIn()
	{
		if (string.IsNullOrWhiteSpace(model.Email) || string.IsNullOrWhiteSpace(model.Password))
		{
			canLogIn = false;
		}
		else
		{
			canLogIn = true;
		}
	}

	private void InputChanged(ChangeEventArgs eventArgs, string field)
	{
		if (field == "email")
		{
			model.Email = eventArgs?.Value?.ToString();
			CanLogIn();
		}
		else if (field == "password")
		{
			model.Password = eventArgs?.Value?.ToString();
			CanLogIn();
		}
	}

	private async Task ExecuteLogin()
	{
		if (string.IsNullOrWhiteSpace(model.Email))
		{
			emailErrorText = "Please enter your email address";
		}
		else if (!emailRegex.IsMatch(model.Email))
		{
			emailErrorText = "Please enter a valid email address";
		}
		else if (string.IsNullOrWhiteSpace(model.Password))
		{
			passwordErrorText = "Please enter your password";
		}
		else
		{
			btnText = "Signing In...";
			try
			{
				AuthenticatedUserModel result = await AuthService.Login(model);
				if (result is null)
				{
					authenticationErrorText = "There was an error when trying to log in.";
					showAuthenticationError = true;
				}
				else
				{
					NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
				}
			}
			catch (HttpRequestException)
			{
				authenticationErrorText = "Looks like the API is offline.";
				showAuthenticationError = true;
			}
			btnText = "Sign In";
		}
	}

	private void ToggleSidebar()
	{
		showSidebar = !showSidebar;
	}

	private async void OnLogout()
	{
		await AuthService.Logout();
	}

	private void GlobalException(Exception ex)
	{
		jsRuntime.InvokeVoidAsync("log", "Error has occurred" + ex.Message);
	}

}