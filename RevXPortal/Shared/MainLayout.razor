@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject IStudentEndpoint _studentEndnoint
@inject IJSRuntime jsRuntime
@inject IAuthenticationService AuthService


<style>
    .revx-sidebar {
        background-image: linear-gradient(to bottom right, #334c66, #3e6581) !important;
        width: 14rem;
        height: calc(100vh - 3.5rem);
        position: sticky;
        top: 0;
        margin-top: 3.5rem;
    }

    .revx-sidebar.force {
        position: absolute;
        display: block;
        z-index: 100000;
    }

    .nav-bar {
        display: flex;
        justify-content: space-between;
        background-image: linear-gradient(to bottom right, #213850, #3e6581) !important;
        position: fixed;
        width: 100%;
        z-index: 1000;
        height: 3.5rem;
        align-items: center;
    }

    .nav-bar-item {
        height: 3.5rem;
        width: calc(100vw / 2);
    }

    .login-container:focus-visible {
        border: none;
        outline: none;
    }

    .logo {
        text-align: left;
    }
    .account {
        text-align: right;
        display: flex;
        align-items: center;
        justify-content: flex-end;
    }

    .main-page {
        display: flex;
        overflow: hidden;
        height: 100vh;
    }

    .content {
        flex: 1;
        max-height: calc(100vh - 3.5rem);
        overflow: auto !important;
        margin-top: 3.5rem;
    }

    .navbar-toggler {
        display: none;
    }

    .navbar-brand {
        margin-left: 1.5rem;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
    }

    .login-logo {
        padding: 3rem 0 1rem;
    }

    .revx-card {
        background: #fff;
        box-shadow: 0 1px 1px 0 rgb(58 60 77 / 10%), 0 2px 8px 0 rgb(58 60 77 / 8%);
        border-radius: 0 0 1px 1px;
        border: none;
        margin: 5rem auto;
        max-width: 41rem;
        min-width: 41rem;
        position: relative;
        padding: 40px 80px;
    }

    .revx-input {
        width: 100%;
        border: 1px solid #d1d7de;
        height: 3.3rem;
        line-height: 3.3rem;
        border-radius: 3px;
        padding-left: 15px;
        -webkit-appearance: none;
        font-size: 1.2rem;
    }

    .revx-input.error {
        border: 2px solid red;
    }

    .revx-input.valid {
        border: 2px solid #00dd00;
    }

    .revx-input:focus {
        border: 1px solid #000;
    }
    
    .login-btn {
        width: 70%;
        margin: calc(2rem + .5rem) auto;
        display: block;
        height: 3.3rem;
        border-radius: 3px;
        border: none;
        background-color: #00ae0d;
        color: #f2f2f5;
    }
    .login-btn:focus {
        border: none;
        outline: none;
    }

    .login-btn:hover {
        background-color: #008f0b;
    }

    .login-btn.working {
        background-color: #6bca73;
    }

    .login-btn.disabled {
        background-color: rgb(239, 239, 239);
        color: #000;
    }
</style>
<AuthorizeView Context="context">
    <Authorized>
          <div class="master">
            <div class="nav-bar">
                <div class="navbar-toggler nav-bar-item">
                    <button class="navbar-toggler-btn" @onclick="ToggleSidebar">
                        <i class="fas fa-bars" style="font-size: 1.4rem; color: #d7d7d7;"></i>
                    </button>
                </div>
                <div class="logo nav-bar-item">
                    <a class="navbar-brand" href=""><img src="https://timcohussstorage.blob.core.windows.net/revxlogo/Logo-text-transparent.png" style="height: 2.5rem;" /></a>
                </div>
                <div class="account nav-bar-item">
                    <AccountInfo Name="@($"{context.User.FindFirst(ClaimTypes.GivenName).Value} {context.User.FindFirst(ClaimTypes.Surname).Value}")">
                        <AccountInfoDropItem OnClick="OnLogout">Log Out</AccountInfoDropItem>
                        <AccountInfoDropItem>Help Center</AccountInfoDropItem>
                    </AccountInfo>
                </div>
            </div>
            <div class="main-page">
                <ToastNotification />
                <div class="revx-sidebar @(showSidebar ? "force" : "")">
                        <NavMenu />
                </div>

                <div class="content px-4">
                    <CascadingAuthenticationState>
                        @Body
                    </CascadingAuthenticationState>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="login-container" tabindex="0" @onkeyup="@(async (e) => { if (e.Key == "Enter") { await ExecuteLogin(); }; })" >
            <div class="login-logo">
                <img src="https://timcohussstorage.blob.core.windows.net/revxlogo/Logo-text-transparent.png" style="width: 15rem; display: block; margin: 0 auto;" />
            </div>
            <div class="revx-card">
                <h1 style="font-weight: 100; text-align: center; padding: 2rem 0;">Welcome to the RevX Portal</h1>
                    <div style="margin-bottom: 1rem">
                        <input class="revx-input @(model.Email == string.Empty ? "error" : model.Email is null ? "" : "valid")" type="email" placeholder="Email" @onkeyup="@(async (e) => { if (e.Key == "Enter") { await ExecuteLogin(); }; })" @oninput="@((e) => InputChanged(e, "email"))" />
                        @if (model.Email == string.Empty ||(model.Email is not null && !emailRegex.IsMatch(model.Email)))
                        {
                            <small style="color: red;">@emailErrorText</small>
                        }
                    </div>
                    <div style="margin-bottom: 1rem">
                        <input class="revx-input @(model.Password == string.Empty ? "error" : model.Password is null ? "" : "valid")" type="password" placeholder="Password" @onkeyup="@(async (e) => { if (e.Key == "Enter") { await ExecuteLogin(); }; })" @oninput="@((e) => InputChanged(e, "password"))"/>
                        @if (model.Password == string.Empty)
                        {
                            <small style="color: red;">@passwordErrorText</small>
                        }
                </div>
                    <div style="margin-bottom: 0.5rem">
                        <button type="submit" class="login-btn @(canLogIn ? "" : "disabled") @(btnText == "Signing In..." ? "working" : "")" @onclick="ExecuteLogin">@btnText</button>
                        @if(showAuthenticationError)
                        {
                            <small style="color: red; text-align: center; margin-top: -2rem; display: block;">@authenticationErrorText</small>
                        }
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    public string UserName { get; set; } = "";
    private AuthenticationUserModel model = new();
    private bool showAuthenticationError = false;
    private string authenticationErrorText { get; set; }
    private string emailErrorText { get; set; }
    private string passwordErrorText { get; set; }
    private bool canLogIn { get; set; } = false;
    private string btnText { get; set; } = "Sign In";
    private bool showSidebar { get; set; } = false;
    private Regex emailRegex { get; set; } = new Regex(@"^[a-zA-Z0-9.!#$%&'*+=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$");


    //private void OnLogin()
    //{
    //    NavManager.NavigateTo($"/login?url={NavManager.Uri.Replace(NavManager.BaseUri, "")}");
    //}

    private void CanLogIn()
    {
        if (string.IsNullOrWhiteSpace(model.Email) || string.IsNullOrWhiteSpace(model.Password))
        {
            canLogIn =  false;
        }
        else
        {
            canLogIn =  true;
        }
    }

    private void InputChanged(ChangeEventArgs eventArgs, string field)
    {
        if (field == "email")
        {
            model.Email = eventArgs?.Value?.ToString();
            CanLogIn();
        }
        else if (field == "password")
        {
            model.Password = eventArgs?.Value?.ToString();
            CanLogIn();
        }
    }

    private async Task ExecuteLogin()
    {
        if (string.IsNullOrWhiteSpace(model.Email))
        {
            emailErrorText = "Please enter your email address";
        }
        else if (!emailRegex.IsMatch(model.Email))
        {
            emailErrorText = "Please enter a valid email address";
        }
        else if (string.IsNullOrWhiteSpace(model.Password))
        {
            passwordErrorText = "Please enter your password";
        }
        else
        {
            btnText = "Signing In...";
            try
            {
                AuthenticatedUserModel result = await AuthService.Login(model);
                if (result is null)
                {
                    authenticationErrorText = "There was an error when trying to log in.";
                    showAuthenticationError = true;
                }
            }
            catch (HttpRequestException)
            {
                authenticationErrorText = "Looks like the API is offline.";
                showAuthenticationError = true;
            }
            NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
            btnText = "Sign In";
        }
    }

    private void ToggleSidebar()
    {
        showSidebar = !showSidebar;
    }

    private async void OnLogout()
    {
        await AuthService.Logout();
    }
}