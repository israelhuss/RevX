<style>
    :root {
        --container-width: 75vw;
        --chart-container-width: calc(var(--container-width) - 4.5rem);
        --chart-height: 25rem;
        --chart-rows: @RowCount;
        --chart-row-height: calc(var(--chart-height) / var(--chart-rows));
        --bar-group-width: calc(100% / @DataLength);
        --bar-width: calc((100% - 2.5rem) / 2);
    }

    .container {
        width: var(--container-width);
    }

    .card-header {
        display: flex;
        justify-content: space-between
    }

    .card-body {
        padding-bottom: 4rem;
        padding-top: 2.5rem;
        padding-left: 4.5rem;
        padding-right: 3rem;
        word-wrap: normal;
    }

    .chart-container {
        position: relative;
        height: var(--chart-height);
        width: 100%;
    }

    .value-box {
        position: absolute;
        top: 0;
        left: -10px;
        display: flex;
        flex-direction: column-reverse;
    }

    .value-box-cell {
        position: relative;
        border-top: solid 2px #808080;
        width: 10px;
        height: var(--chart-row-height);
    }

    .value-box-cell-text {
        position:absolute;
        top: 0;
        left: 0;
        transform: translate(-120%, -50%);
        font-size: 12px;
    }

    .chart {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        border-left: solid 2px #808080;
        border-bottom: solid 2px #808080;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
    }

    .chart-row {
        height: var(--chart-row-height);
        width: 100%;
        border-top: solid 2px #D3D3D3;
    }

    .chart-footer {
        position: absolute;
        top: var(--chart-height);
        left: 0;
        display: flex;
        width: 100%;
    }

    .chart-footer-cell {
        border-left: solid 2px #808080;
        width: var(--bar-group-width);
        height: 10px;
    }

    .bar-container {
        position: absolute;
        left: 2px;
        bottom: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: flex-end;
        justify-content: space-evenly;
    }

    .bar-group {
        display: flex;
        width: var(--bar-group-width);
        justify-content: center;
        align-items: flex-end;
    }

    .bar {
        width: var(--bar-width);
        display: flex;
        flex-direction: column-reverse;
        animation: roll-up 1.5s;
    }

    .bar-1 {
        margin-right: 1px;
    }
    .bar-2 {
        margin-left: 1px;
    }

    .stack-2 {
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }

    .stack-1:hover,
    .stack-2:hover {
        box-shadow: rgb(0 0 0 / 0.80) 0 0 10px;
    }
</style>



<div class="container">
    <div class="card">

        <div class="card-header">
            <div>
                <h5>School Hours - @BarOneTotals.ToString("C")</h5>
                <h5 style="margin-bottom: 0;">After School Hours - @BarTwoTotals.ToString("C")</h5>
            </div>
            <div style="display: flex;">
                <div style="padding: .5rem;">
                    <div style="display: flex; align-items: center; padding-bottom: 7px;">
                        <div style="width: 12px; height: 12px; background-color: #1365fc; margin-right: 5px;"></div>
                        <p style="margin: 0; line-height:1;">School Hours / Encore</p>
                    </div>
                    <div style="display: flex; align-items: center; padding-bottom: 7px;">
                        <div style="width: 12px; height: 12px; background-color: #6299ff; margin-right: 5px;"></div>
                        <p style="margin: 0; line-height:1;">School Hours / Legadel</p>
                    </div>
                </div>
                <div style="padding: .5rem;">
                    <div style="display: flex; align-items: center; padding-bottom: 7px;">
                        <div style="width: 12px; height: 12px; background-color: #298a00; margin-right: 5px;"></div>
                        <p style="margin: 0; line-height:1;">After School Hours / Encore</p>
                    </div>
                    <div style="display: flex; align-items: center; padding-bottom: 7px;">
                        <div style="width: 12px; height: 12px; background-color: #4dac25; margin-right: 5px;"></div>
                        <p style="margin: 0; line-height:1;">After School Hours / Legadel</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="chart-container">
                @if (Data is not null)
                {
                    <div class="value-box">
                        @for (int i = 0; i <= RowCount; i++)
                        {
                            <div class="value-box-cell">
                                <p class="value-box-cell-text">@ValuePoints[i]</p>
                            </div>
                        }
                    </div>
                    <div class="chart">
                        @for (var i = 0; i < RowCount; i++)
                        {
                            <div class="chart-row"></div>

                        }
                    </div>
                    <div class="bar-container">
                        @foreach (var item in Data)
                        {
                            <div class="bar-group">
                                <div class="bar bar-1">
                                    <Tooltip Text="@($"{item.BarOnePrimary} Hours\n{((item.BarOnePrimary) * 32).ToString("C") }")">
                                        <div class="stack-1" style="height: @(((item.BarOnePrimary * 32) * 25) / MaxValue + "rem"); background-color: #1365fc; border-top-left-radius: @(item.BarOneSecondary > 0 ? "0" : "5px"); border-top-right-radius: @(item.BarOneSecondary > 0 ? "0" : "5px"); ">
                                            <p style="color: white; display: inline;"></p>
                                        </div>
                                    </Tooltip>
                                    <Tooltip Text="@($"{item.BarOneSecondary} Hours\n{((item.BarOneSecondary) * 32).ToString("C") }")">
                                        <div class="stack-2" style="height: @(((item.BarOneSecondary * 32) * 25) / MaxValue + "rem"); background-color: #6299ff;">
                                            <p style="color: white; display: inline;"></p>
                                        </div>
                                    </Tooltip>
                                    <div>$@((item.BarOnePrimary * 32) + (item.BarOneSecondary * 32))</div>
                                </div>
                                <div class="bar bar-2">
                                    <Tooltip Text="@($"{item.BarTwoPrimary} Hours\n{(item.BarTwoPrimary * 32).ToString("C") }")">
                                        <div class=" stack-1" style="height: @(((item.BarTwoPrimary * 32) * 25) / MaxValue + "rem"); background-color: #298a00; border-top-left-radius: @(item.BarTwoSecondary > 0 ? "0" : "5px"); border-top-right-radius: @(item.BarTwoSecondary > 0 ? "0" : "5px"); ">
                                            <p style="color: white; display: inline;"></p>
                                        </div>
                                    </Tooltip>
                                    <Tooltip Text="@($"{item.BarTwoSecondary} Hours\n{((item.BarTwoSecondary) * 32).ToString("C") }")">
                                        <div class="stack-2" style="height: @(((item.BarTwoSecondary * 32)  * 25) / MaxValue + "rem"); background-color: #4dac25;">
                                            <p style="color: white; display: inline;"></p>
                                        </div>
                                    </Tooltip>
                                    <div>$@((item.BarTwoPrimary * 32) + (item.BarTwoSecondary * 32))</div>

                                </div>
                            </div>
                        }
                    </div>
                    <div class="chart-footer">
                        @foreach (var item in Data)
                        {
                            <div class="chart-footer-cell">
                                <p style="transform: rotate(30deg) translate(20%, -30%); padding-top: 1rem; padding-left: 1rem;">@item.Title</p>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <LoadingIndicator />
                }
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public int RowCount { get; set; }

    private int DataLength { get; set; }

    public double BarOneTotals { get; set; }

    public double BarTwoTotals { get; set; }

    [Parameter]
    public IEnumerable<IStackedBarData> Data { get; set; }

    [Parameter]
    public List<string> Titles { get; set; }


    private List<double> Values { get; set; } = new();
    private double MaxValue { get; set; }
    private List<string> ValuePoints { get; set; }


    protected override void OnParametersSet()
    {
        if (Data is not null)
        {
            DataLength = Data.Count();
            foreach (var item in Data)
            {
                double barOne = ((item.BarOnePrimary) * 32) + ((item.BarOneSecondary) * 32);
                double barTwo = ((item.BarTwoPrimary) * 32) + ((item.BarTwoSecondary) * 32);
                Values.Add(barOne);
                Values.Add(barTwo);
                BarOneTotals += barOne;
                BarTwoTotals += barTwo;
            }
            Console.WriteLine(Data);
            CalculateValues();
        }
    }

    private void CalculateValues()
    {
        double min = Values.Min();
        double max = Values.Max();

        var minLength = Math.Floor(Math.Log10(min) + 1);
        var maxLength = Math.Floor(Math.Log10(max) + 1);

        if (maxLength <= 3)
        {
            double test = SlideRule(max, (int)maxLength);
        }
        else if (maxLength >= 4 && maxLength < 7)
        {
            double result = max + 1000 - max % 1000;
            MaxValue = result;
            ValuePoints = new List<string>();
            for (double i = 0; i <= result; i += (result / RowCount))
            {
                var val = Math.Floor(Math.Log10(i) + 1) > 3 ? i.KiloFormat() : i.KiloFormat();
                ValuePoints.Add(val);
            }
        }
        else if (maxLength >= 7)
        {
            double test = SlideRule(max, 2);
        }
    }

    public static double SlideRule(double value, int sigdigits)
    {
        if (value == 0.0) return value;
        bool neg = value < 0;
        if (neg) value = -value;
        double m10 = Math.Log10(value);
        double scale = Math.Pow(10, Math.Floor(m10) - sigdigits + 1);
        value = Math.Round(value / scale) * scale;
        if (neg) value = -value;
        return value;
    }
}