@inject IJSRuntime jsRuntime

<style>
	.bar-container {
		position: absolute;
		left: 2px;
		bottom: 0;
		width: 100%;
		height: 100%;
		display: flex;
		align-items: flex-end;
		justify-content: space-evenly;
	}

	.bar-group {
		display: flex;
		width: var(--bar-group-width);
		justify-content: space-evenly;
		align-items: flex-end;
	}

	.bar {
		width: var(--bar-width);
		display: flex;
		flex-direction: column-reverse;
		transition: height 1.5s ease-out;
		animation: roll-up 1.5s;
	}

	.stack-2 {
		border-top-left-radius: 5px;
		border-top-right-radius: 5px;
	}

		.stack-1:hover,
		.stack-2:hover {
			box-shadow: rgb(0 0 0 / 0.80) 0 0 10px;
		}
</style>

<CascadingValue Value="Parent">
	<CascadingValue Value="this">
		<div class="bar-container">
			@ChildContent
		</div>
	</CascadingValue>
</CascadingValue>

@code {
	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[CascadingParameter]
	public ChartBase Parent { get; set; }

	protected override void OnInitialized()
	{
		if (Parent is null)
		{
			throw new Exception("StackedBarChart must be a child of ChartBase");
		}
	}

	//protected override void OnAfterRender(bool firstRender)
	//{
	//	Parent.SetReady(true);
	//	jsRuntime.InvokeVoidAsync("log", "Set to true");
	//	base.OnAfterRender(firstRender);
	//}
}
