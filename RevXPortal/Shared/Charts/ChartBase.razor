@inject IJSRuntime jsRuntime

<style>
	:root {
		--container-width: @Width;
		--chart-container-width: calc(var(--container-width) - 4.5rem);
		--chart-height: @Height;
		--chart-height-number: @(new Regex(@"\d\d+").Match(Height).Value);
		--chart-rows: @RowCount;
		--chart-row-height: calc(var(--chart-height) / var(--chart-rows));
		--bar-group-width: calc(100% / @Lables.Count);
		--bar-width: calc((100% - 2.5rem) / 2);
	}

	.container {
		width: var(--container-width);
		-webkit-print-color-adjust: exact;
	}

	.chart-header {
		display: flex;
		justify-content: space-between;
		border-bottom: solid 1px #c2c2c2;
		padding: 1rem;
	}

	.chart-body {
		padding: 1.25rem;
	}

	.chart-grand-container.with-border {
		border: solid 1px #b9b9b9;
		border-radius: 3px;
	}

	.chart-container {
		position: relative;
		height: var(--chart-height);
		/*width: calc(100% - 2.5rem);*/
		margin: 2rem;
	}

	.value-box {
		position: absolute;
		top: 0;
		left: -10px;
		display: flex;
		flex-direction: column-reverse;
	}

	.value-box-cell {
		position: relative;
		border-top: solid 2px #808080;
		width: 10px;
		height: var(--chart-row-height);
	}

	.value-box-cell-text {
		position: absolute;
		top: 0;
		left: 0;
		transform: translate(-120%, -50%);
		font-size: 12px;
	}

	.chart {
		position: absolute;
		left: 0;
		top: 0;
		width: 100%;
		border-left: solid 2px #808080;
		border-bottom: solid 2px #808080;
		display: flex;
		flex-direction: column;
		align-items: flex-end;
	}

	.chart-row {
		height: var(--chart-row-height);
		width: 100%;
		border-top: solid 2px #e9e9e9;
		position: relative;
	}

	.chart-footer {
		position: absolute;
		top: calc(var(--chart-height) + 2px);
		left: 0;
		display: flex;
		width: 100%;
	}

	.chart-footer-cell {
		position: relative;
		border-left: solid 2px #808080;
		width: var(--bar-group-width);
		height: 10px;
	}

	.bar-container {
		position: absolute;
		left: 2px;
		bottom: 0;
		width: 100%;
		height: 100%;
		display: flex;
		align-items: flex-end;
	}

	.bar-group {
		display: flex;
		width: var(--bar-group-width);
		justify-content: center;
		align-items: flex-end;
	}

	.bar {
		width: var(--bar-width);
		display: flex;
		flex-direction: column-reverse;
		animation: roll-up 1.5s;
	}

	.bar-1 {
		margin-right: 1px;
	}

	.bar-2 {
		margin-left: 1px;
	}

	.stack-2 {
		border-top-left-radius: 5px;
		border-top-right-radius: 5px;
	}

		.stack-1:hover,
		.stack-2:hover {
			box-shadow: rgb(0 0 0 / 0.80) 0 0 10px;
		}
</style>


<div class="chart-grand-container @(ChartHeader is not null ? "with-border" : "")">
	@if (ChartHeader is not null)
	{
		<div class="chart-header">
			@ChartHeader
		</div>
	}
	<div class="chart-body">
		<div class="container">
			<div class="chart-container">
				<div class="value-box">
					@if (ValuePoints is not null)
					{
						for (int i = 0; i <= RowCount; i++)
						{
							<div class="value-box-cell">
								<p class="value-box-cell-text">@ValuePoints[i]</p>
							</div>
						}
					}
				</div>
				<div class="chart">
					@for (var i = 0; i < RowCount; i++)
					{
						<div class="chart-row"></div>
					}
				</div>
				<CascadingValue Value="ValuePointsNumbers">
					<CascadingValue Value="MaxValue">
						<CascadingValue Value="Width">
							<CascadingValue Value="Height">
								@ChartContent
							</CascadingValue>
						</CascadingValue>
					</CascadingValue>
				</CascadingValue>
				<div class="chart-footer">
					@foreach (var item in Lables)
					{
						<div class="chart-footer-cell">
							@if (FooterLabelStyle == FooterStyles.CenteredSlant)
							{
								<p style="transform: rotate(30deg) translate(20%, -30%); padding-top: 1rem; padding-left: 1rem; width: min-content;">@item</p>
							}
							else if (FooterLabelStyle == FooterStyles.Centered)
							{
								<p style=" padding-top: .5rem; width: min-content; margin: 0 auto;">@item</p>
							}
							else if (FooterLabelStyle == FooterStyles.UnderLine)
							{
								<p style="padding-top: 1rem; width: min-content; margin: 0 auto; position: absolute; left: 0;top: 0; transform: translate(-50%);">@item</p>
							}
							else
							{
								<p style="transform: rotate(30deg) translate(20%, -30%); padding-top: 1rem; padding-left: 1rem; width: min-content;">@item</p>
							}
						</div>
					}
				</div>
			</div>
		</div>
	</div>
</div>
@code {
	[Parameter]
	public int RowCount { get; set; }

	[Parameter]
	public List<string> Lables { get; set; }

	[Parameter]
	public FooterStyles FooterLabelStyle { get; set; }

	[Parameter]
	public RenderFragment ChartContent { get; set; }

	[Parameter]
	public RenderFragment ChartHeader { get; set; }

	[Parameter]
	public List<double> Values { get; set; }

	[Parameter]
	public string Width { get; set; } = "75vw";

	[Parameter]
	public string Height { get; set; } = "25rem";

	[Parameter]
	public bool SkipFirstFooterLabel { get; set; }

	protected override void OnParametersSet()
	{
		CalculateValues();
		StateHasChanged();
		jsRuntime.InvokeVoidAsync("log", JsonSerializer.Serialize(ValuePoints));
		jsRuntime.InvokeVoidAsync("log", JsonSerializer.Serialize(ValuePointsNumbers));
		if (SkipFirstFooterLabel)
		{
			Lables.Insert(0, "");
		}
	}


	private double MaxValue { get; set; }
	private double MinValue { get; set; } = 0;
	private List<string> ValuePoints { get; set; }
	private List<double> ValuePointsNumbers { get; set; }
	private void CalculateValues()
	{
		try
		{
			if (Values is not null)
			{
				double max = Values.Max();
				var maxLength = Math.Floor(Math.Log10(max) + 1);

				if (maxLength <= 3)
				{
					double result = max + 100 - max % 100;
					MaxValue = result;
					ValuePoints = new List<string>();
					ValuePointsNumbers = new();
					for (double i = 0; Math.Round(i) <= result; i += ( result / RowCount ))
					{
						var val = Math.Round(i).KiloFormat();
						ValuePoints.Add(val);
						ValuePointsNumbers.Add(Math.Round(i));
					}
				}
				else if (maxLength >= 4 && maxLength < 7)
				{
					double result = max + 1000 - max % 1000;
					MaxValue = result;
					ValuePoints = new List<string>();
					ValuePointsNumbers = new();
					for (double i = 0; i <= result; i += ( result / RowCount ))
					{
						var val = Math.Floor(Math.Log10(i) + 1) > 3 ? i.KiloFormat() : i.KiloFormat();
						ValuePoints.Add(val);
						ValuePointsNumbers.Add(Math.Round(i));
					}
				}
			}
		}
		catch (Exception ex)
		{
			jsRuntime.InvokeVoidAsync("log", ex.Message);
		}
	}
}