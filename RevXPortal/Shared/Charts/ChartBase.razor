@inject IJSRuntime jsRuntime

<style>
	:root {
		--chart-height: @Height;
		--chart-height-number: @(new Regex(@"\d\d+").Match(Height).Value);
		--chart-rows: @RowCount;
		--chart-row-height: calc(var(--chart-height) / var(--chart-rows));
		--bar-group-width: calc(100% / @Lables.Count);
	}

	.container-main {
		-webkit-print-color-adjust: exact;
		print-color-adjust: exact;
	}

	.chart-header {
		display: flex;
		justify-content: space-between;
		border-bottom: solid 1px #c2c2c2;
		padding: 1.60rem;
	}

	.chart-body {
		padding: 2.00rem;
	}

	.chart-grand-container.with-border {
		border: solid 1px #b9b9b9;
		border-radius: 3px;
	}

	.chart-container {
		position: relative;
		height: var(--chart-height);
		/*width: calc(100% - 4.00rem);*/
		margin: 3.20rem 0 3.20rem 3.20rem;
	}

	.value-box {
		position: absolute;
		top: 0;
		left: -10px;
		display: flex;
		flex-direction: column-reverse;
	}

	.value-box-cell {
		position: relative;
		border-top: solid 2px #808080;
		width: 10px;
		height: var(--chart-row-height);
	}

	.value-box-cell-text {
		position: absolute;
		top: 0;
		left: 0;
		transform: translate(-120%, -50%);
		font-size: 12px;
	}

	.chart {
		position: absolute;
		left: 0;
		top: 0;
		width: 100%;
		border-left: solid 2px #808080;
		border-bottom: solid 2px #808080;
		display: flex;
		flex-direction: column;
		align-items: flex-end;
	}

	.chart-row {
		height: var(--chart-row-height);
		width: 100%;
		border-top: solid 2px #e9e9e9;
		position: relative;
	}

	.chart-footer {
		position: absolute;
		top: calc(var(--chart-height) + 2px);
		left: 0;
		display: flex;
		width: 100%;
	}

	.chart-footer-cell {
		position: relative;
		border-left: solid 2px #808080;
		width: var(--bar-group-width);
		height: 10px;
	}
</style>


<div class="chart-grand-container @(ChartHeader is not null ? "with-border" : "")">
	@if (ChartHeader is not null)
	{
		<div class="chart-header">
			@ChartHeader
		</div>
	}
	<div class="chart-body">
		<div class="container-main" style="max-width: 95%; margin: 0 0 0 auto;">
			<div class="chart-container">
				<div class="value-box">
					@if (ValuePoints is not null)
					{
						for (int i = 0; i <= RowCount; i++)
						{
							<div class="value-box-cell">
								<p class="value-box-cell-text">@ValuePoints[i]</p>
							</div>
						}
					}
				</div>
				<div class="chart">
					@for (var i = 0; i < RowCount; i++)
					{
						<div class="chart-row"></div>
					}
				</div>
				<CascadingValue Value="this">
					@if (!Ready)
					{
						<div style="width: 100%; height: 100%; background-color: #f2f2f2; display: flex; justify-content: center; align-items: center;">
							<LoadingIndicator Inline="true" DotCount="5"></LoadingIndicator>
						</div>
					} else
					{
						@ChartContent
					}
					<div class="chart-footer">
						@foreach (var item in Lables)
						{
							<FooterCell>@item</FooterCell>
						}
					</div>
				</CascadingValue>
			</div>
		</div>
	</div>
</div>
@code {
	[Parameter]
	public int RowCount { get; set; } = 5;

	public List<string> Lables { get; set; } = new();

	[Parameter]
	public FooterStyles FooterLabelStyle { get; set; }

	[Parameter]
	public RenderFragment ChartContent { get; set; }

	[Parameter]
	public RenderFragment ChartHeader { get; set; }

	[Parameter]
	public bool ShowBarTotals { get; set; } = true;

	private Dictionary<string, double> Values { get; set; } = new();

	[Parameter]
	public string Width { get; set; } = "75vw";

	[Parameter]
	public string Height { get; set; } = "40.00rem";

	[Parameter]
	public bool SkipFirstFooterLabel { get; set; }

	public bool Ready { get; set; }

	protected override void OnInitialized()
	{
		Ready = false;
		Task.Delay(100).ContinueWith(t =>
		{
			Ready = true;
			StateHasChanged();
		});
		base.OnInitialized();
	}

	public void SetReady(bool val)
	{
		Ready = val;
		StateHasChanged();
	}

	protected override void OnParametersSet()
	{
		CalculateValues();
		if (SkipFirstFooterLabel)
		{
			Lables.Insert(0, "");
		}
	}

	public void SetFooterStyle(FooterStyles styles)
	{
		FooterLabelStyle = styles;
		StateHasChanged();
	}

	public int AddLabel(string label)
	{
		Lables.Add(label);
		StateHasChanged();
		return Lables.Count - 1;
	}

	public void AddValue(string id, double val)
	{
		Values[ id ] = val;
		CalculateValues();
	}


	public double MaxValue { get; set; }
	private double MinValue { get; set; } = 0;
	private List<string> ValuePoints { get; set; }
	private List<double> ValuePointsNumbers { get; set; }
	private void CalculateValues()
	{
		try
		{
			double max = Values.Values.Max();
			jsRuntime.InvokeVoidAsync("log", $"ChartBase: MaxValue is now set to {max}");
			var maxLength = Math.Floor(Math.Log10(max) + 1);

			if (maxLength <= 3)
			{
				double result = max + 100 - max % 100;
				MaxValue = result;
				ValuePoints = new List<string>();
				ValuePointsNumbers = new();
				for (double i = 0; Math.Round(i) <= result; i += ( result / RowCount ))
				{
					var val = Math.Round(i).KiloFormat();
					ValuePoints.Add(val);
					ValuePointsNumbers.Add(Math.Round(i));
				}
			}
			else if (maxLength >= 4 && maxLength < 7)
			{
				double result = max + 1000 - max % 1000;
				MaxValue = result;
				ValuePoints = new List<string>();
				ValuePointsNumbers = new();
				for (double i = 0; i <= result; i += ( result / RowCount ))
				{
					var val = Math.Floor(Math.Log10(i) + 1) > 3 ? i.KiloFormat() : i.KiloFormat();
					ValuePoints.Add(val);
					ValuePointsNumbers.Add(Math.Round(i));
				}
			}
			StateHasChanged();
		}
		catch (Exception ex)
		{
			jsRuntime.InvokeVoidAsync("log", "ChartBase: " + ex.Message);
		}
	}
}